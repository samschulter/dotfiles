#+STARTUP: fold

* Notes
- All paths to outside files (like journal files, binaries, conda environments, etc.) are assumed to have a symbolic link from somewhere inside the =user-emacs-directory=. For instance, we put links to binaries (like =miniconda3=) into the ~bin~ directory.

* org-babel configuration

Mostly taken from [[https://github.com/KaratasFurkan/.emacs.d#initel][Karatas Furkan]].

** =init.el=
This block gets tangled to =init.el= and becomes the entry point that EMACS sees. It needs to create =config.el= (if it doesn't exist) and load it.

#+begin_src emacs-lisp :tangle init.el
(defconst config-org (expand-file-name "config.org" user-emacs-directory))
(defconst config-el (expand-file-name "config.el" user-emacs-directory))

(unless (file-exists-p config-el)
  (require 'org)
  (org-babel-tangle-file config-org config-el))

(load-file config-el)
#+end_src


** Applying changes

Tangle this org-config every time this file is saved, see [[https://github.com/KaratasFurkan/.emacs.d#applying-changes][here]]. I only replaced the call to ~emacs~ with ~/Applications/Emacs.app/Contents/MacOS/Emacs~ for my macOS setup.

#+BEGIN_SRC emacs-lisp
(defun fk/add-local-hook (hook function)
  "Add buffer-local hook."
  (add-hook hook function :local t))

(defun fk/async-process (command &optional name filter)
  "Start an async process by running the COMMAND string with bash. Return the
process object for it.

NAME is name for the process. Default is \"async-process\".

FILTER is function that runs after the process is finished, its args should be
\"(process output)\". Default is just messages the output."
  (require 's)
  (make-process
   :command `("bash" "-c" ,command)
   :name (if name name
           "async-process")
   :filter (if filter filter
             (lambda (process output) (message (s-trim output))))))

(defun fk/tangle-config ()
  "Export code blocks from the literate config file
asynchronously."
  (interactive)
  ;; prevent emacs from killing until tangle-process finished
  (add-to-list 'kill-emacs-query-functions
               (lambda ()
                 (or (not (process-live-p (get-process "tangle-process")))
                     (y-or-n-p "\"fk/tangle-config\" is running; kill it? "))))
  ;; tangle config asynchronously
  (fk/async-process
   (format "/Applications/Emacs.app/Contents/MacOS/Emacs %s --batch --eval '(org-babel-tangle nil \"%s\")'" config-org config-el)
   "tangle-process"))
#+END_SRC

If the current org file is the literate config file, add a local hook to tangle code blocks on every save to update configuration.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (if (equal buffer-file-truename config-org)
                (fk/add-local-hook 'after-save-hook 'fk/tangle-config))))
#+END_SRC


** Reload the config

The other slow down is loading changes. It's tedious to have to close and reopen emacs to see changes so we want a refresh function bound to "C-c r". This is taken from [[https://gitlab.com/shilling.jake/emacsd/-/blob/master/config.org][Jake Shilling's config]].

#+BEGIN_SRC emacs-lisp
(defun my/reload-config ()
  "Reload configuration files."
  (interactive)
  (load-file (expand-file-name "init.el" user-emacs-directory)))

(global-set-key (kbd "C-c r") 'my/reload-config)
#+END_SRC


* Package Management


** Straight
Instead of the built-in =package.el,= I'm going to use [[https://github.com/raxod502/straight.el][straight]] to
manage and install packages. The big draw for me is the [[https://github.com/raxod502/straight.el#guiding-principles][guiding
principle]] of reproduciblity and ensuring that this configuration file
is the sole source of truth for packages on whatever system it's used.
Here's some necessary boilerplate stuff that sets up the package
management system.

Of course, before =straight= can be used to install any other package,
it needs to be installed. The [[https://github.com/raxod502/straight.el#bootstrapping-straightel][README]] provides this bootstrapping code:

#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

These settings are taken from [[https://github.com/KaratasFurkan/.emacs.d#settings][Karatus Furkan]]:

#+BEGIN_SRC emacs-lisp
(setq straight-check-for-modifications '(check-on-save find-when-checking))
(setq vc-follow-symlinks t)
#+END_SRC

** Use-Package

Install ~use-package~ with ~straight~ and integrate ~straight~ into ~use-package~

#+BEGIN_SRC emacs-lisp
;; Install `use-package'.
(straight-use-package 'use-package)

;; Install packages in `use-package' forms with `straight'. (not the built-in package.el)
(setq straight-use-package-by-default t)

;; Key Chord functionality in use-package
(use-package use-package-chords
  :config (key-chord-mode 1))

;; Diminish functionality
(use-package diminish)
#+END_SRC


* Performance Optimization

This section was taken from [[https://github.com/KaratasFurkan/.emacs.d#performance-optimization][Karatas Furkan]] (who in turn got this from
the Doom configuration). It stops garbage collection during start up
and while the minibuffer is active.

#+begin_src emacs-lisp :tangle early-init.el
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

#+begin_src emacs-lisp
  (defconst 1mb 1048576)
  (defconst 20mb 20971520)
  (defconst 30mb 31457280)
  (defconst 50mb 52428800)

  (defun fk/defer-garbage-collection ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun fk/restore-garbage-collection ()
    (run-at-time 1 nil (lambda () (setq gc-cons-threshold 30mb))))

  (add-hook 'emacs-startup-hook 'fk/restore-garbage-collection)
  (add-hook 'minibuffer-setup-hook 'fk/defer-garbage-collection)
  (add-hook 'minibuffer-exit-hook 'fk/restore-garbage-collection)

  (setq read-process-output-max (* 3 1mb))  ;; lsp-mode's performance suggest
#+end_src

#+begin_src emacs-lisp :tangle early-init.el
  (defvar default-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq file-name-handler-alist default-file-name-handler-alist)))
#+end_src

#+begin_src emacs-lisp :tangle early-init.el
  (setq frame-inhibit-implied-resize t)
#+end_src

* General key bindings

=bind-key= makes general key-bindings easier and has powerful functions
=hydra= allows to make custom key mode maps
[[https://github.com/justbur/emacs-which-key/][which-key]] is a minor mode that helps discover key bindings. If you enter a prefix and wait, the minibuffer will display matching key bindings.

#+BEGIN_SRC emacs-lisp
(use-package bind-key)
(use-package hydra
  :bind (("C-c c" . hydra-consult/body)))
(use-package which-key
  :diminish
  :config (which-key-mode))
#+END_SRC


* Core (built-in functionality, essential editing, user interface)

Configuration for various built-in functionality and essential editing tools (like expand-region or multiple-cursors)

** Directories for automatically-generated files by Emacs

Make Emacs store customizations in a separate file, rather than ~init.el~. Also, use a custom directory to store all backup files in a single directory of our choice, rather than in the directory where the original files reside.

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file t)

;; backup files: http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files
(setq backup-by-copying t)
(setq backup-directory-alist `(("." . "~/.emacs.d/auto-backup-files")))
#+END_SRC

** Basic user interface (not the theme)

At startup, have a clean =scratch= buffer in =org-mode=

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)

;; https://emacs.stackexchange.com/questions/16492/is-it-possible-to-create-an-org-mode-scratch-buffer
(setq initial-major-mode 'org-mode)
#+END_SRC

Have a decently sized window frame (such that it fills 13 inch MBP display)

#+BEGIN_SRC emacs-lisp
(setq initial-frame-alist '((width . 138) ; chars
                            (height . 42) ; lines
                            (left . 0)
                            (top . 0)))
(setq default-frame-alist '((width . 138)
                            (height . 42)
                            (left . 0)
                            (top . 0)))
#+END_SRC

Increase general font size

#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :height 160)
#+end_src

Remove various default GUI components of Emacs (tool bar, scroll bars, ...)

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

Settings for basic text editing (including code)

#+BEGIN_SRC emacs-lisp
(setq-default show-trailing-whitespace t)

;; highlights beginning/ending parenthesis
;; more options here: https://www.emacswiki.org/emacs/ShowParenMode
(show-paren-mode 1)
(setq show-paren-delay 0)

;; Highlight the whole line of point
(global-hl-line-mode 1)

;; Display column number in modeline
(column-number-mode t)

;; Show the (built-in) line-numbers, except in some modes
(when (version<= "26.0.50" emacs-version)
  (progn (global-display-line-numbers-mode t)
         (dolist (mode '(org-mode-hook
                         org-journal-mode-hook
                         term-mode-hook
                         shell-mode-hook
                         eshell-mode-hook))
          (add-hook mode (lambda () (display-line-numbers-mode 0)))))
)
#+END_SRC

** Behavior of basic functions

Define the scrolling behavior

#+BEGIN_SRC emacs-lisp
;; scrolling stops only if point is at last position
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Scrolling.html
(setq scroll-error-top-bottom t)
(setq scroll-preserve-screen-position t)
;; When point leaves window, only scroll until point instead of re-centering
(setq scroll-conservatively 100)
#+END_SRC

Don't ring the bell when I type something wrong - not needed with =doom-modeline=
# (setq ring-bell-function 'ignore)

When splitting windows, I want the point to follow to the newly created window. This is what I do 99% of the time anyway (=C-x 3= > =C-x o= > =find-file/switch-buffer=). Hence, we can as well combine the two commands (=C-x 3= and =C-x o=) into a single one. (Same for =C-x 2=.)

#+BEGIN_SRC emacs-lisp
;; https://stackoverflow.com/questions/6464738/how-can-i-switch-focus-after-buffer-split-in-emacs
(bind-key "C-x 2" (lambda () (interactive)(split-window-vertically) (other-window 1)))
(bind-key "C-x 3" (lambda () (interactive)(split-window-horizontally) (other-window 1)))
#+END_SRC

** Theme

Not having any theme does not look good in Emacs. Alternative good themes are =doom-one= for dark and =doom-opera-light= for light.
The customization code is from [[https://emacs.stackexchange.com/questions/28940/how-to-overwrite-properly-a-face-for-a-particular-theme][here]].

#+BEGIN_SRC emacs-lisp
(defvar my-theme-dark 'doom-molokai)
(defvar my-theme-light 'doom-one-light)
(defvar my-current-theme my-theme-light)

(use-package doom-themes
  :config
  ;; Some customization for the doom-one-light theme (better color for DONE items and checked boxes)
  (defvar after-load-theme-hook nil
    "Hook run after a color theme is loaded using `load-theme'.")
  (defadvice load-theme (after run-after-load-theme-hook activate)
    "Run `after-load-theme-hook'."
    (run-hooks 'after-load-theme-hook))
  (defun customize-doom-one-light ()
    "Customize doom-one-light theme"
    (if (member 'doom-one-light custom-enabled-themes)
        (progn
         (message "Applying custom changes to doom-one-light theme")
         (let ((custom--inhibit-theme-enable nil))
          (custom-theme-set-faces
           'doom-one-light
           '(org-headline-done ((t (:foreground "#A8A8A8" :inherit org-todo))))))
  )))
  (add-hook 'after-load-theme-hook 'customize-doom-one-light)
  (load-theme my-current-theme t)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config)
)
#+END_SRC

A function to toggle between a light and a dark theme. This is taken from [[https://emacs.stackexchange.com/questions/24088/make-a-function-to-toggle-themes][here]].

#+BEGIN_SRC emacs-lisp
(defadvice load-theme (before theme-dont-propagate activate)
  "Disable theme before loading new one."
  ;;(mapcar #'disable-theme custom-enabled-themes))  ;; This one throws a mapcar/mapc warning
  (mapc #'disable-theme custom-enabled-themes))

(defun my-next-theme (theme)
  (progn (load-theme theme t)
         (setq my-current-theme theme)))

(defun my-toggle-theme ()
  "Toggle between light and dark themes."
  (interactive)
  (cond ((eq my-current-theme my-theme-dark) (my-next-theme my-theme-light))
        ((eq my-current-theme my-theme-light) (my-next-theme my-theme-dark))))

(bind-key "<f5>" 'my-toggle-theme)
#+END_SRC


** Modeline

We are using [[https://github.com/dbordak/telephone-line][telephone-line]]

#+BEGIN_SRC emacs-lisp
(use-package telephone-line
  :init
  (display-time)  ;; Display time in modeline
  (custom-set-variables '(display-battery-mode t)) ;; Display battery status
  :custom
  (telephone-line-primary-left-separator    'telephone-line-flat)
  (telephone-line-secondary-left-separator  'telephone-line-flat)
  (telephone-line-primary-right-separator   'telephone-line-flat)
  (telephone-line-secondary-right-separator 'telephone-line-flat)
  :config
  ;; Custom segments
  (telephone-line-defsegment telephone-line-conda-segment ()
    (when (derived-mode-p 'python-mode)
      (telephone-line-raw conda-env-current-name)))
  (telephone-line-defsegment telephone-line-lsp-segment ()
    (if lsp-mode
        "[lsp]"))
  (setq telephone-line-lhs
        '((accent . (telephone-line-simple-major-mode-segment))
          (nil    . (telephone-line-buffer-segment))
          (nil    . (telephone-line-position-segment))))
  (setq telephone-line-rhs
        '((nil    . (telephone-line-conda-segment))
          (nil    . (telephone-line-lsp-segment))
          (nil    . (telephone-line-vc-segment))
          (nil    . (telephone-line-flycheck-segment))))
  (setq telephone-line-height 35)
  (telephone-line-mode 1)
)
#+END_SRC

Other options for telephone-segments:
- =telephone-line-buffer-segment=
- =telephone-line-filesize-segment=
- =telephone-line-simple-minor-mode-segment=
- =telephone-line-buffer-name-segment=
- =telephone-line-projectile-buffer-segment=
- =telephone-line-project-segment=
- =telephone-line-projectile-segment= <- This one seems to slow down org-journal
- =telephone-line-file-name-absolute-path-segment=

We used =doom-modeline= before, but because of an [[https://github.com/justbur/emacs-which-key/issues/130][issue]] with the =which-key= package, we switched to =telephone-line=. Using a different modeline seems to be the only way to resolve the issue entirely, modifications to =which-key= only reduce the frequency of Emacs getting stuck.

#  +BEGIN_SRC emacs-lisp
#   (use-package doom-modeline
#     :init
#     (display-time)  ;; Display time in modeline
#     (custom-set-variables '(display-battery-mode t))
#     ;; show doom-modeline at the same time with dashboard
#     (add-hook 'emacs-startup-hook 'doom-modeline-mode -100)
#     :custom
#     (doom-modeline-buffer-encoding nil)
#     (doom-modeline-vcs-max-length 40)
#     (doom-modeline-bar-width 1)
#     (doom-modeline-env-python-executable "~/work/opt/miniconda3/bin/python")
#     (doom-modeline-python-executable "~/work/opt/miniconda3/bin/python")
#     :hook
#     (dashboard-after-initialize . column-number-mode))
#  +END_SRC


** Basic file editing

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)

;; insert closing bracket automatically
;; more info: http://ergoemacs.org/emacs/emacs_insert_brackets_by_pair.html
(electric-pair-mode 1)

;; change keybord shortcuts of C-a and M-m
(global-set-key (kbd "C-a") 'back-to-indentation)
(global-set-key (kbd "M-m") 'move-beginning-of-line)

;; non-nil means a single space does not end a sentence! Okay, that's useful, making <M-a> and <M-e> jump through sentences even without double space!
(setq sentence-end-double-space nil)

;; default indentation of 4 spaces
(setq-default indent-tabs-mode nil) ; no TAB for indent
(setq-default tab-width 4)
(setq sh-basic-offset 4)
(setq sh-indentation 4)

;; override selected text when starting to type, instead of appending the new text
(delete-selection-mode t)

;; end every file with a newline
(setq require-final-newline t)

;; auto-refresh buffer if file changes outside of emacs
(global-auto-revert-mode t)

;; replace shortcut to "kill-buffer" with "kill-this-buffer". I don't want to get
;; asked which buffer to kill, most of the time I want to kill the current one.
;; source: http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/
(defun bjm/kill-this-buffer ()
  "Kill the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'bjm/kill-this-buffer)

;; CamelCase for forward-word and backward-word
;; http://emacsredux.com/blog/2013/04/21/camelcase-aware-editing/
;;(add-hook 'prog-mode-hook 'subword-mode)
;;(add-hook 'org-mode-hook 'subword-mode)
;; Just a fancier way of the above I guess? Also allows us to diminish subword-mode
(use-package subword
    :straight (:type built-in)
    :diminish subword-mode
    :hook
    (prog-mode . subword-mode)
    (org-mode . subword-mode)
)

(use-package expand-region
  :bind
  (("C-=" . er/expand-region)))

(use-package
  multiple-cursors
  :bind (("C-S-c C-S-c" . 'mc/edit-lines)
         ("C->" . 'mc/mark-next-like-this)
         ("C-<" . 'mc/mark-previous-like-this)
         ("C-c C-<" . 'mc/mark-all-like-this)))
#+END_SRC


** Others

#+BEGIN_SRC emacs-lisp
;; downgrades important questions (yes/no) to (y/n)
(fset 'yes-or-no-p 'y-or-n-p)

;; disable vc mode (it's soooo slow on a mounted network device)
;; http://snak.tumblr.com/post/4203099162/disable-vc-mode
;; Well, this should only be disabled when working with remote/mounted files, otherwise things like modeline won't show version control status. I'm commenting out this since we rarely work with remote/mounted files anymore.
;; (setq vc-handled-backends nil)

;; it still happens too often ... ask me before closing emacs
;; (setq confirm-kill-emacs 'y-or-n-p)

(use-package recentf
  :straight (:type built-in)
  :hook (after-init . recentf-mode)
  :custom
  (recentf-auto-cleanup 'never)
  (recentf-max-saved-items nil))
#+END_SRC

Ibuffer sidebar

#+BEGIN_SRC emacs-lisp
(use-package ibuffer-sidebar
    :commands (ibuffer-sidebar-toggle-sidebar)
    :bind
    ("M-9" . ibuffer-sidebar-toggle-sidebar))
#+END_SRC

Disabled commands

#+BEGIN_SRC emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC


* Switching windows

=ace-window= helps switching between windows. If more than 2 windows open, it will show a label for each window to select. Also has commands for switching windows.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :init (setq aw-scope 'global)
  :bind (("M-o" . ace-window)
         ("C-x o" . ace-window)))
#+END_SRC


* Dired

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :straight (:type built-in)
    :custom
    (dired-listing-switches "-lAhp") ;; No '--group-directories-first' in macOS
    (dired-dwim-target t)
    :bind
    (:map dired-mode-map
          ("H" . dired-hide-details-mode)))
  (use-package dired-subtree
    :after dired
    :custom
    (dired-subtree-use-backgrounds nil)
    :bind
    (:map dired-mode-map
          ("TAB" . dired-subtree-toggle)
          ("<tab>" . dired-subtree-toggle)))
  (use-package all-the-icons-dired
    :hook
    (dired-mode . all-the-icons-dired-mode))
  (use-package dired-sidebar
    :commands (dired-sidebar-toggle-sidebar)
    :bind
    ("M-0" . dired-sidebar-toggle-sidebar))
#+END_SRC


* Org mode

** Plain org mode

#+BEGIN_SRC emacs-lisp
(use-package org
  :diminish (org-indent-mode)
  :init (setq org-startup-indented t
              org-src-fontify-natively t
              org-cycle-separator-lines 1
              org-src-tab-acts-natively t
              org-pretty-entities t
              org-log-into-drawer t
              org-archive-location "%s_archive::datetree/"
              org-todo-keywords '((sequence "TODO" "|" "DONE"))
              org-enforce-todo-dependencies t
              org-log-done (quote time))
  :bind (:map org-mode-map
              ("RET" . org-return-and-maybe-indent)
              ("<C-return>" . org-meta-return))
  :hook ((org-mode . flyspell-mode)
         (org-mode . visual-line-mode))
  )
#+END_SRC

Beautify headlines with [[https://github.com/integral-dw/org-superstar-mode][org-superstar]], which is a descendant of [[https://github.com/sabof/org-bullets][org-bullets]]:

#+begin_src emacs-lisp
(use-package org-superstar
  :hook (org-mode . (lambda () (org-superstar-mode 1))))
#+end_src

** Journal

TODO: Seems we can set =org-journal-find-file= to =find-file= instead of =find-file-other= so we do not split the window all the time!

Seems with some new versions of org/emacs, =org-journal= has an unresolved issue: https://github.com/bastibe/org-journal/issues/392 ...

#+BEGIN_SRC emacs-lisp
(use-package org-journal
  :init
  (customize-set-variable 'org-journal-dir (expand-file-name "journal" user-emacs-directory))
  (customize-set-variable 'org-journal-date-format "%A, %d %B %Y")
  (customize-set-variable 'org-journal-file-type 'yearly)
  :bind (("C-x C-j" . org-journal-new-entry)))
#+END_SRC

** org-modern-mode

#+BEGIN_SRC emacs-lisp
(use-package org-modern
  :init
  (global-org-modern-mode)
)
#+END_SRC

* Git

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  (("C-x g" . magit-status))
  :hook
  (git-commit-setup . git-commit-turn-on-flyspell))
#+END_SRC

Show change information from git with [[https://github.com/emacsorphanage/git-gutter][git-gutter]]:

#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :diminish
  :hook
  (prog-mode . git-gutter-mode)
  (yaml-mode . git-gutter-mode)
  :init
  (setq git-gutter:update-interval 0.5))
#+END_SRC

[[https://github.com/emacsmirror/git-timemachine][git-timemachine]] is a package to consider. Allows to browse through the history of a given file!

* yas-snippets

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :defer nil
  :custom
  (yas-indent-line nil)
  (yas-inhibit-overlay-modification-protection t)
  :custom-face
  (yas-field-highlight-face ((t (:inherit region))))
  :hook
  (snippet-mode . (lambda () (setq-local require-final-newline nil)))
  :config
  (yas-global-mode))
(use-package yasnippet-snippets)
#+END_SRC

# (require 'yasnippet)
# (yas-reload-all)
# (add-hook 'python-mode-hook #'yas-minor-mode)

* Completion: vertico/orderless/consult/marginalia

We previously had: =ivy=, =counsel=, =swiper=, =all-the-icons-ivy=, and =ivy-rich=.  After watching the video of Mike Zamansky (https://www.youtube.com/watch?v=5ffb2at2d7w), I'm trying =vertico= with =orderless=, =consult=, =embark= and =marginalia=. More resources on this setup are [[https://www.youtube.com/watch?v=QBvGa0Yg1NI][here]] and [[https://systemcrafters.cc/live-streams/may-21-2021][here]].

- =vertico= is only the completion framework in the minibuffer. It uses the default emacs interface (different in =ivy= or =helm=) making it easy to mix and match with other packages.
- =orderless= is a matching framework
- =consult= provides extra functions using vertico
- =marginalia= gives extra information in the minibuffer completion, e.g., description of functions when running M-x
- =embark= is a package that provides actions for the current selection

Now =vertico= + =orderless= replace =ivy=. =consult= replaces =counsel=. =marginalia= replaces =helpful=. =embark= is a new feature.

- What is missing now that I had earlier? Or what does not work?
  - +The find-files cmd should use alphabetic sorting+
  - +In find-files, I want the "C-j" and "C-l" commands back, i.e., "word-back" and "C-j" doing the same as "TAB"+
  - +Also, =consult-at-line= does not "open" (or unfold) org headings > I think setting =org-fold-core-style= to =overlays= instead of =text-properties= helps, see https://github.com/minad/consult/issues/563+
  - I'm missing the "search-at-point" function > One can run =M-n= inside the minibuffer to add point into minibuffer ... hm, but for =consult-line= it would be cool to insert only the word at point with =M-n=, not the whole line ...
  - For alphabetic sorting, I think it would be better if it does not care about upper/lower case

** vertico & orderless

#+BEGIN_SRC emacs-lisp
(use-package vertico
  :init
  (vertico-mode)
  :bind (:map minibuffer-local-map
         ("C-j" . vertico-insert)
         ("C-f" . vertico-insert)
         ("C-l" . backward-kill-word)))
;; Sorting: vertico is compatible with Emacs' default completion system. Seemed we can use default variables to make it ignore cases, see https://elpa.gnu.org/packages/doc/vertico.html#Completion-styles-and-TAB-completion, but it does not. When completing files (find-file), I would expect the order to ignore cases, but it first lists files/directories with capital letter, then without capital letters.
;;
;; Bindings: We could write our own function to go to last "/" for any text in the prompt ...
;; https://github.com/minad/vertico/issues/123
;; Note that "C-backspace" does "vertico-directory-up" and "M-backspace" does "backward-kill-word"

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))


;; customize sorting for files:
;; https://github.com/minad/vertico/wiki#customize-sorting-based-on-completion-category
;; This needs the extension multiform, which needs special install
;; https://github.com/radian-software/straight.el/issues/819#issuecomment-887558559
(use-package vertico-multiform
  :straight nil
  :load-path "straight/build/vertico/extensions"
  :after vertico
  :config
  (vertico-multiform-mode)
  (setq vertico-multiform-categories
        '((file (vertico-sort-function . vertico-sort-alpha))))
)

(use-package vertico-repeat
  :straight nil
  :load-path "straight/build/vertico/extensions"
  :after vertico
  :bind
  ("C-r" . vertico-repeat)
)
;; This can cause some issue ... but I can't recall what it was; made emacs responseless sometimes
;;(add-hook 'minibuffer-setup-hook #'vertico-repeat-save)

(use-package savehist
  :init
  (savehist-mode))

(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

** marginalia

#+BEGIN_SRC
(use-package marginalia
  :init
  (marginalia-mode))
#+END_SRC

** consult
Let's define a =hydra= with functions from =consult=

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-consult
    (:color blue
            :hint nil)
    "
       CONSULT

       Navigation            Search/Grep
  ---------------------------------------------
    _g_: goto line          _s_: line-multi
    _i_: imenu              _O_: multi-occur
    _I_: imenu project      _k_: keep-lines
    _m_: mark ring          _f_: focus-lines
    _M_: mark ring global   _G_: grep
    _o_: outline            _R_: ripgrep
    _H_: org-heading        _l_: locate

  " ("g"   consult-goto-line)
  ("i"   consult-imenu)
  ("I"   consult-imenu-multi)
  ("m"   consult-mark)
  ("M"   consult-global-mark)
  ("o"   consult-outline)
  ("H"   consult-org-heading)
  ("s"   consult-line-multi)
  ("O"  consult-multi-occur)
  ("k"   consult-keep-lines)
  ("f"   consult-focus-lines)
  ("G"   consult-grep)
  ("R"   consult-ripgrep)
  ("l"   consult-find)
  ("q"   nil "cancel" :color red))

(use-package consult
  :bind (("C-x b" . consult-buffer)
         ("M-y" . consult-yank-pop)
         ("M-g M-g" . consult-goto-line)
         ("C-s" . consult-line))
  :init
  (setq org-fold-core-style 'overlays)
  :config
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-recent-file
   consult--source-project-recent-file
   :preview-key (kbd "M-."))
  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;; There are multiple reasonable alternatives to chose from.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. projectile.el (projectile-project-root)
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
)
#+END_SRC

** Embark

#+BEGIN_SRC emacs-lisp
(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
#+END_SRC


* Project Management

Next, we need a couple hydras to make =projectile-mode= functions easier to access.

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-projectile
    (:color teal
            :hint nil)
    "
       PROJECTILE: %(projectile-project-root)

       Find File            Search/Tags          Buffers                Cache
  ------------------------------------------------------------------------------------------
    _d_: find              _a_: line-multi        _i_: Ibuffer           _c_: cache clear
   _fd_: file curr dir     _g_: consult-grep      _b_: switch to buffer  _x_: remove known project
    _o_: multi-occur       _G_: update gtags      _X_: cleanup non-existing
    _r_: recent file       _K_: Kill all buffers                     ^^^^_z_: cache current

  " ("a"   consult-line-multi)
  ("b"   consult-project-buffer)
  ("c"   projectile-invalidate-cache)
  ("d"   consult-find)
  ("fd"  projectile-find-file-in-directory)
  ("g"   consult-grep)
  ("G"   ggtags-update-tags)
  ("i"   projectile-ibuffer)
  ("K"   projectile-kill-buffers)
  ("o"   projectile-multi-occur)
  ("r"   projectile-recentf)
  ("x"   projectile-remove-known-project)
  ("X"   projectile-cleanup-known-projects)
  ("z"   projectile-cache-current-file)
  ("q"   nil "cancel"
   :color blue))
#+END_SRC

Finally we configure the package itself and connect it to
=my/vterm-or-projectile-run-vterm= function and hydras above.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :defer nil
  :custom
  (projectile-completion-system 'ivy)
  (projectile-switch-project-action 'projectile-dired)
  :bind (:map projectile-mode-map
              ("C-c p" . hydra-projectile/body))
  :config (projectile-mode 1))
#+END_SRC


* Flyspell

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :straight (:type built-in)
    :diminish
    :config
    (setq exec-path (append exec-path '("/usr/local/bin")))
    :hook
    (text-mode . flyspell-mode))
#+END_SRC

Add ~(prog-mode . flyspell-prog-mode)~ to ~:hook~ if you want spell checking in programming mode

* Coding languages

** General

General commenting/uncomment of marked regions:

#+BEGIN_SRC emacs-lisp
(bind-key "C-c ;" 'comment-or-uncomment-region)
#+END_SRC


** Python environment

A few things we want from the Python-environment
- Reasonable code completion (=auto-complete= is a good package, but can only complete content available in open buffers; If performance is okay, =lsp= would be better)
- Show function syntax and documentation (=eldoc=?)
- Flycheck with =flake8=

=miniconda3= environments with [[https://github.com/necaris/conda.el][conda.el]]. We need this to make =lsp-mode= work correctly, i.e., accessing installed packages.

#+BEGIN_SRC emacs-lisp
(use-package conda
  :init
  (setq conda-env-home-directory (expand-file-name "bin/miniconda3" user-emacs-directory))
  (setq conda-anaconda-home (expand-file-name "bin/miniconda3" user-emacs-directory))
)
#+END_SRC

=company-box= is an extension to =company= completions, but nicer, with icons, documentations and other feats. =lsp-mode= will automatically use it for completions.

#+BEGIN_SRC emacs-lisp
(use-package company-box
  :hook (company-mode . company-box-mode))
#+END_SRC

Now we use [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] gives eldoc, completion, etc.

#+BEGIN_SRC emacs-lisp
(defun my/py-activate-lsp-and-conda ()
  "Activate lsp-mode after activating conda environment."
  (interactive)
  (progn
    (if (not (window-minibuffer-p))
      ;; only run if not in minibuffer - otherwise things get messed up with buffer preview in ivy/counsel mode
      (if conda-env-current-name
          (progn
            (message "CONDA environment is active")
            (lsp))
        (progn
          (message "No CONDA environment is active ...")
          (call-interactively #'conda-env-activate)
          (lsp))))))

(use-package lsp-mode
  :ensure t
  :init
  (setq lsp-keymap-prefix "C-c u")  ;; This is the entry point to many lsp functions!
  :hook
  (lsp-mode . lsp-enable-which-key-integration)
  :config
  (setq lsp-headerline-breadcrumb-enable nil)
  (setq lsp-diagnostic-package :none)
  :commands
  (lsp)
  :hook
  (python-mode . my/py-activate-lsp-and-conda)
)
#+END_SRC

Flycheck setup

#+BEGIN_SRC emacs-lisp
(defhydra hydra-flycheck
  (:color teal
          :hint nil)
  "
     FLYCHECK:

     Errors                          Checker                  Flycheck
------------------------------------------------------------------------------------------
  _l_: list                       _s_: verify setup        _m_: manual website
  _n_: next error                 _h_: describe checker    _v_: version
  _p_: prev error                 _x_: disable checker
  _w_: error into kill ring
  _d_: display error at point
  _c_: clear all errors

" ("l"   flycheck-list-errors)
  ("n"   flycheck-next-error)
  ("p"   flycheck-previous-error)
  ("w"   flycheck-copy-errors-as-kill)
  ("d"   flycheck-display-error-at-point)
  ("c"   flycheck-clear)
  ("s"   flycheck-verify-setup)
  ("h"   flycheck-describe-checker)
  ("x"   flycheck-disable-checker)
  ("m"   flycheck-manual)
  ("v"   flycheck-version)
  ("q"   nil "cancel"
   :color blue))

(use-package flycheck
  :diminish
  :hook
  (flycheck-mode . flymake-mode-off)
  (python-mode . flycheck-mode)
  :config
  (setq flycheck-check-syntax-automatically '(mode-enabled save))  ;; Only check the buffer when it was saved
  (setq flycheck-python-flake8-executable (expand-file-name "bin/miniconda3/bin/flake8" user-emacs-directory))
  (setq-default flycheck-disabled-checkers '(python-pylint))
  :bind (:map flycheck-mode-map
         ("C-c f" . hydra-flycheck/body))
)
#+END_SRC


** YAML

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
#+END_SRC


** Markdown

Description of =markdown-mode= is [[https://jblevins.org/projects/markdown-mode/][here]].

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown")
)
#+END_SRC


* Shells and terminals

- System crafters video; overview of different options (term/ansi-term, vterm, shell, eshell): https://www.youtube.com/watch?v=wa_wZIuT9Vw&t=657s
- term/ansi-term and vterm are emulators; eshell is an actual emacs package that replicates a shell. So commands like ~ls~ are actually re-implemented in elisp. The shell emulators send a command like ~ls~ to the actual underlying shell and then print the output.
- For vterm: https://github.com/akermu/emacs-libvterm
- Fish (https://fishshell.com) ... okay, that's a shell, like =bash= or =zsh= I guess
  - Use fish and iterm2 together: https://lobster1234.github.io/2017/04/08/setting-up-fish-and-iterm2/
  - https://github.com/Ambrevar/emacs-fish-completion
- Warp:
  - There is still the issue in the whitespace in the prompt when inside a git repository
  - No meta-b for backward word is working inside ipdb
  - fuzzy search is not working for directories ... https://github.com/warpdotdev/Warp/issues/149


* NEXT
- Watch video on dired from system crafters. Someone also mentioned this: https://github.com/ralesi/ranger.el, https://ranger.github.io ...
- Look at terminal options
- Take a look at org-roam: https://www.orgroam.com; is this something I want to use?
- I think we should go through all packages anyway and see how to best configure them
- The automatic on-save fk/tangle is not working
- =telephone-line= makes org-journal slow whenever I want to add something about the project name

- +Use ripgrep? https://github.com/BurntSushi/ripgrep > Sure, I installed it and can use it with =consult-ripgrep= > Add it to the hydra for consult+
- +=consult= has features for registers? > Yes, see https://github.com/minad/consult#register. > Is this useful? Maybe, let's try to integrate it into the config > Well, I can just use =C-x r= to open the =which-key= menu.+
- +Take a look at registers: https://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html; Video from Prot: https://www.youtube.com/watch?v=u1YoF4ycLTY+
  - +Yup, that's interesting and may be useful to me. Essentially it's a clipboard (like copy/paste), but you can have multiple nameable registers and you can put other forms of data besides text there.+
  - +Interesting use cases: Put multiple texts into different registers. E.g., mark text A and do =C-x r i a= to store text A in register a. Then, you can mark text B and do =C-x r s b= to store text B in register b. You can then insert text B from register b via =C-x r s b=+
  - +The other cool thing is that you can store other forms of data, like the location of the current point. Type =C-x r SPC a= to store point in register a. Then go somewhere else in emacs (other buffer, even the buffer can be closed). Then jump back to the stored point in register a via =C-x r j a=+
- +Should we do hydras for org-mode and markdown-mode? ... Hm, for lsp mode would be interesting! > Nope, for =lsp=, we just need =C-c u= > =lsp-keymap-prefix=, which is the entry point to many lsp-related functions+
- +Take a look at =org-superstar=, which has many options to play with > Well, not so interesting+
- +Maybe =eglot= instead of =lsp-mode=? https://www.youtube.com/watch?v=ROnceqt3kpE&t=56s+
  - +https://ddavis.io/posts/eglot-python-ide/+
  - +flycheck/flymake issues - does not have a nice interface with flymake to go through errors I guess? And does not show what the error is+
  - +when selecting the right pyls, will it show info for detectron2?+
  - +completion via company?+
  - +Or is =lsp-mode= just better when properly configured? https://ddavis.io/posts/emacs-python-lsp/+
  - +Okay, I think we got =lsp-mode= and =conda= working reasonably well now.+
  - +One thing missing is a good configuration of =flycheck=; well, one option is to deactivate automatic pick-up of flycheck in lsp ...+
- +Modeline: It's not shown if a file is saved or not!!! > Fixed+
- +=nyxt= as web browser? https://github.com/atlas-engineer/nyxt > Okay, that's a standalone program, not a package for emacs. That said, it's a configurable web browser which you can operate mostly with a keyboard (not only with mouse), just like Emacs. There is a blog post why it's a standalone thing and not an Emacs package ... it's more modern, and ultimately, their goal is to replace Emacs itself. Also, the current version is not officially supported in macOS ... so let's wait a bit to try it out+
- +It seems emacs is slow now. Why? > Has something to do with the new modeline ... or has it something to do with the vc-backends being active now? vc-backends not needed if that's the issue > It's not vc-backends, it was about the =projectile-segment= ... removed and changed the filename, which includes the project name now.+
- +helm has some issue with =which-key=. Actually, this also happens with =ivy=! See https://github.com/justbur/emacs-which-key/issues/130 and https://github.com/justbur/emacs-which-key/#other-options > "zwass" says that switching to a different modeline (telephone-line) resolves the issue entirely. Other tweaks make this issue happen less frequently.+
- +=ivy/swiper/counsel= issues:+
  - +highlight colors could be better - the font-color of the highlighted item should be brighter! > =prescient= was at fault here, but if we want to use it, we now know what faces to adjust!+
  - +Shouldn't we have the buffer previews when going through results (like ag, switch-buffer, etc)? > It's there for switch-buffer ... I guess that's already better than in default helm settings+
  - +=C-r= should do resume > I think it does > Yeah it runs =ivy-resume=+
  - +Setting for search at point -> It's =C-M s=+
  - +Can we make the mini-buffer larger? Shall we do that? > Yes, we can set the =ivy-height= variable (default was 10, I set it to 15)+
  - +For =find-file=, I do not want =prescient= stuff ... I want ordering based on names, not last opened > Well, we removed =prescient=+
  - +When in =dired=, and I want to copy something, I need to find something with fuzzy search as a template, then put that name into the prompt and then be able to edit it, before I apply the action. Currently, I can only do this with tab, which only works when searching in a non-fuzzy way!!! > *One can insert the current candidate via =M-i=* That's exactly what I need!+
- +Preview buffers when switching buffers / find-files, etc. =helm-follow-mode= -> Maybe that's better? https://github.com/jcs-elpa/helm-file-preview -> https://www.reddit.com/r/emacs/comments/gsbgh1/helms_follow_mode_is_disabled_if_i_step_on_a/ -- that's something different I guess?+
- +When I press =C-x 3= to get another window, why isn't point just following? I guess that's more likely than me wanting to open a new window but then NOT go there, especially because that window just shows the exact same thing as I have currently ... well, one could think the other way, that one moves the current window to the other side and changes ... but that's not logical to me. The content that was there, should stay where it was (left, because I write from left to right)+
- +how battery status in modeline - https://www.reddit.com/r/emacs/comments/kymwdc/how_to_remove_battery_from_doom_modeline_in_initel/+
- +markdown mode?+
- +Can it be that helm limits the results to 100? E.g., in projectile - find file (in elwms2-mask2former) - https://emacs.stackexchange.com/questions/7922/helm-projectile-file-limit -> Yup, and the reason is that it's not useful to display more than 100 candidates, refine the search instead ... well, okay. But it can be configured+
- +=yaml-mode= has no line numbers; =yaml-mode= also does not have =git-gutter=+
- +=yaml-mode= is missing+
- +A better interface for =flycheck= would be great ... something like a =hydra= to iterate through errors/warnings! (instead of doing ~C-x  ! n~)+
- +Modeline shows wrong python interpreter ...+
- +Why is the whole system suddenly so slow? > It's faster after disconnect from datacrunch and after disconnecting from external monitor -> That's weird, I think it had something to do with  the bluetooth keyboard. Disconnect and reconnect solved it+
